
int executeCommand(char* cmd, int status,int* ex, job** jobs, job* jfg){
    int *n = realloc(NULL, sizeof(int));
    char **givencmd = stringTokenizer(cmd,n);
    char** redicmd;
    int redirecto = outputRed(givencmd,n);    
    int redirecti = inputRed(givencmd,n);
    int bg = ampersandBG(givencmd, n);

    //execute normally
    pid_t pid = fork();

    if (pid < -1) {
            printf("Error, cannot fork\n");
    } else if (pid == 0) {
            printf("[C] I am the child\n");
            printf("My pgid is %d, my pid is %d\n", getpgid(getpid()), getpid());

            // setpgid(0,0);
            //gotta work with signal
            signal(SIGTSTP, SIGTSTP);
            signal(SIGCONT, SIGCONT);
            signal(SIGINT, SIGINT);
            // if(bg==0){
            //     *n--;
            // }
            if(exitStatus(givencmd, n, ex)==0){
                for (int i = 0; i < *n; i++){ free(givencmd[i]);}
                free(givencmd);
                free(n);
                exit(0);
            } 
            if(jobs_cmd(givencmd,n, jobs)==0){
                for (int i = 0; i < *n; i++){ free(givencmd[i]);}
                free(givencmd);
                free(n);
                exit(0);
            }
            if((*n-redirecti)>1 && redirecti>0){
                redicmd = malloc(sizeof(char*)*(redirecti+1));
                    for (int i = 0; i < redirecti; i++){ 
                        redicmd[i] = givencmd[i];
                    }
                redicmd[redirecti] = NULL;
                
                int in;
                size_t got;
                char buffer[1024];

                in = open(givencmd[redirecti+1], O_RDONLY);

                if ((in <= 0))
                {
                    fprintf (stderr, "Couldn't open a file\n");
                    exit (errno);
                }
                dup2 (in, 0);
                close (in);
                execvp(redicmd[0], redicmd);
                while (1)
                {
                    got = fread (buffer, 1, 1024, stdin);  
                    if (got <=0) break;
                }
                
            }else if((*n-redirecto)>1 && redirecto>0){
                    int out;
                    out = open (givencmd[redirecto+1], O_TRUNC | O_CREAT | O_WRONLY, 0666);
                    if ((out <= 0))
                    {
                    fprintf (stderr, "Couldn't open a file\n");
                    exit (errno);
                    }
                    redicmd = malloc(sizeof(char*)*(redirecto+1));
                    for (int i = 0; i < redirecto; i++){ 
                        redicmd[i] = givencmd[i];
                    }
                    redicmd[redirecto] = NULL;
                    dup2 (out, 1);   
                    close (out);
                    if(fork()==0)
                    execvp(redicmd[0], redicmd);
                
            }else{
                printf("NO REDIRECT\n");

                execvp(givencmd[0], givencmd); 
            }
            
            printf("ICSH: command not found: %s\n", cmd);
            for (int i = 0; i < *n; i++){ free(givencmd[i]);}
            free(givencmd);
            free(n);
            exit(9);
    } else {

            // process *mychild = initpro(pid, givencmd, status);
            // job_push(jobs, cmd, getpgid(getpid()), mychild);
            printf("[P] I'm waiting for my child\n");
            printf("My pgid is %d, my pid is %d\n", getpgid(getpid()), getpid());

            if(bg==1){
                waitpid(pid, &status, NULL);
                if (WIFEXITED(status))  {
                int exit_status = WEXITSTATUS(status);
                *ex = exit_status;         
                printf("Exit status of the child was %d\n", exit_status); 
                }
            }
            else{
                jobs_show(*jobs);
                signal(SIGCHLD, bgdone);
                if (WIFEXITED(status))  {
                int exit_status = WEXITSTATUS(status);
                *ex = exit_status;         
                printf("FROM BG: Exit status of the child was %d\n", exit_status); 
            }
        }
    }

    for (int i = 0; i < *n; i++){ free(givencmd[i]);}
    free(givencmd);    
    free(n);
}
